package org.openjweb.sys.config;




import lombok.extern.slf4j.Slf4j;
import org.openjweb.core.service.CommUserService;
import org.openjweb.sys.auth.security.AESPasswordEncoder;
import org.openjweb.sys.entity.CommUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
@Slf4j
public class SecurityConfig extends WebSecurityConfigurerAdapter
{
    @Autowired
    private CommUserService userDetailService;

    //密码加密
    @Bean
    public PasswordEncoder passwordEncoder()
    {
        log.info("使用AESPasswordEncoder............");
        //return new BCryptPasswordEncoder();

        return new AESPasswordEncoder();
    }

    /*@Bean
   @Override
   public AuthenticationManager authenticationManagerBean() throws Exception
   {
       return super.authenticationManagerBean();
   }*/
    @Bean
    @Override
    public AuthenticationManager authenticationManager() throws Exception
    {
        return super.authenticationManager();
    }

    //service用户认证
    @Override
    protected void configure(AuthenticationManagerBuilder builder) throws Exception
    {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailService);
        provider.setPasswordEncoder(passwordEncoder());
        builder.authenticationProvider(provider);
    }



    @Override
    protected void configure(HttpSecurity http) throws Exception
    {
        http.formLogin()
                //.loginPage("/login.html")
                .loginProcessingUrl("/login")
                .and()
                .authorizeRequests()
                .antMatchers("/login.html", "/img/**").permitAll()
                .anyRequest().authenticated()
                .and()
                .csrf().disable();
    }
}
